# This is a basic workflow to help you get started with Actions

name: GITHUB_ACTIONS_CICD_TALK

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest

    env: 
      #PKG_NAME: ${{ format('real-value-app-0.1.0.{0}.tgz', github.run_number) }}
      PKG_NAME: real-value-app-0.1.0.${{ github.run_number }}.tgz
      
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2-beta
      with:
        node-version: '12'

    - name: Inspect
      run: echo $GITHUB_RUN_NUMBER $PKG_NAME
        
    - name: Build and Test
      run: |
        npm install
        npm test

    - name: Package
      #run: $( echo 'tar czf $PKG_NAME src node_modules package.json lib public' )
      run: tar czf ${{env.PKG_NAME}} src node_modules package.json lib public
      
    # - uses: actions/upload-artifact@v2
    #   with:
    #     name: ${{ env.PKG_NAME }}
    #     path: ${{ env.PKG_NAME }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ env.PKG_NAME }}
          asset_name: ${{ env.PKG_NAME }}
          asset_content_type: application/zip

